{"ast":null,"code":"import { takeEvery } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\nexport function* fetchCollectionAsync() {\n  yield console.log(\"I'm Fired\");\n  const collectionRef = firestore.collection(\"collections\"); // dispatch(fetchCollectionStart());\n\n  collectionRef.get().then(snapshot => {\n    const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n    dispatch(fetchCollectionsSuccess(collectionsMap));\n  }).catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\nexport function* fetchCollectionStart() {\n  yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["/home/rahul/Desktop/projects/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeEvery","ShopActionTypes","fetchCollectionAsync","console","log","collectionRef","firestore","collection","get","then","snapshot","collectionsMap","convertCollectionsSnapshotToMap","dispatch","fetchCollectionsSuccess","catch","error","fetchCollectionsFailure","message","fetchCollectionStart","FETCH_COLLECTIONS_START"],"mappings":"AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMC,OAAO,CAACC,GAAR,aAAN;AAGA,QAAMC,aAAa,GAAGC,SAAS,CAACC,UAAV,CAAqB,aAArB,CAAtB,CAJoC,CAKpC;;AAEAF,EAAAA,aAAa,CACZG,GADD,GAECC,IAFD,CAEMC,QAAQ,IAAI;AACd,UAAMC,cAAc,GAAGC,+BAA+B,CAACF,QAAD,CAAtD;AACAG,IAAAA,QAAQ,CAACC,uBAAuB,CAACH,cAAD,CAAxB,CAAR;AACH,GALD,EAMCI,KAND,CAMOC,KAAK,IAAIH,QAAQ,CAACI,uBAAuB,CAACD,KAAK,CAACE,OAAP,CAAxB,CANxB;AAOH;AAED,OAAO,UAAUC,oBAAV,GAAiC;AACpC,QAAMnB,SAAS,CAACC,eAAe,CAACmB,uBAAjB,EACXlB,oBADW,CAAf;AAEH","sourcesContent":["import { takeEvery } from \"redux-saga/effects\";\nimport ShopActionTypes from \"./shop.types\";\n\nexport function* fetchCollectionAsync() {\n    yield console.log(`I'm Fired`);\n\n\n    const collectionRef = firestore.collection(\"collections\");\n    // dispatch(fetchCollectionStart());\n\n    collectionRef\n    .get()\n    .then(snapshot => {\n        const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n        dispatch(fetchCollectionsSuccess(collectionsMap));\n    })\n    .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n}\n\nexport function* fetchCollectionStart() {\n    yield takeEvery(ShopActionTypes.FETCH_COLLECTIONS_START,\n        fetchCollectionAsync)\n}"]},"metadata":{},"sourceType":"module"}