{"ast":null,"code":"import shopActionTypes from\"./shop.types\";import{firestore,convertCollectionsSnapshotToMap}from\"../../firebase/firebase.utils\";export var fetchCollectionStart=function fetchCollectionStart(){return{type:shopActionTypes.FETCH_COLLECTIONS_START};};export var fetchCollectionsSuccess=function fetchCollectionsSuccess(collectionsMap){return{type:shopActionTypes.FETCH_COLLECTIONS_SUCCESS,payload:collectionsMap};};export var fetchCollectionsFailure=function fetchCollectionsFailure(errorMessage){return{type:shopActionTypes.fetchCollectionsFailure,payload:errorMessage};};export var fetchCollectionsStartAsync=function fetchCollectionsStartAsync(){return function(dispatch){var collectionRef=firestore.collection(\"collections\");dispatch(fetchCollectionStart());collectionRef.get().then(function(snapshot){var collectionsMap=convertCollectionsSnapshotToMap(snapshot);dispatch(fetchCollectionsSuccess(collectionsMap));}).catch(function(error){return dispatch(fetchCollectionsFailure(error.message));});};};","map":{"version":3,"sources":["/home/rahul/Desktop/projects/crwn-clothing/client/src/redux/shop/shop.actions.js"],"names":["shopActionTypes","firestore","convertCollectionsSnapshotToMap","fetchCollectionStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"AAAA,MAAOA,CAAAA,eAAP,KAA4B,cAA5B,CACA,OAASC,SAAT,CAAoBC,+BAApB,KAA2D,+BAA3D,CAEA,MAAO,IAAMC,CAAAA,oBAAoB,CAAG,QAAvBA,CAAAA,oBAAuB,SAAO,CACvCC,IAAI,CAAEJ,eAAe,CAACK,uBADiB,CAAP,EAA7B,CAIP,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,cAAc,QAAK,CACtDH,IAAI,CAAEJ,eAAe,CAACQ,yBADgC,CAEtDC,OAAO,CAAEF,cAF6C,CAAL,EAA9C,CAKP,MAAO,IAAMG,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,YAAD,QAAmB,CACtDP,IAAI,CAAEJ,eAAe,CAACU,uBADgC,CAEtDD,OAAO,CAAEE,YAF6C,CAAnB,EAAhC,CAKP,MAAO,IAAMC,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,EAAM,CAE5C,MAAO,UAAAC,QAAQ,CAAI,CACf,GAAMC,CAAAA,aAAa,CAAGb,SAAS,CAACc,UAAV,CAAqB,aAArB,CAAtB,CACAF,QAAQ,CAACV,oBAAoB,EAArB,CAAR,CAEAW,aAAa,CACZE,GADD,GAECC,IAFD,CAEM,SAAAC,QAAQ,CAAI,CACd,GAAMX,CAAAA,cAAc,CAAGL,+BAA+B,CAACgB,QAAD,CAAtD,CACAL,QAAQ,CAACP,uBAAuB,CAACC,cAAD,CAAxB,CAAR,CACH,CALD,EAMCY,KAND,CAMO,SAAAC,KAAK,QAAIP,CAAAA,QAAQ,CAACH,uBAAuB,CAACU,KAAK,CAACC,OAAP,CAAxB,CAAZ,EANZ,EAOH,CAXD,CAYH,CAdM","sourcesContent":["import shopActionTypes from \"./shop.types\";\nimport { firestore, convertCollectionsSnapshotToMap } from \"../../firebase/firebase.utils\";\n\nexport const fetchCollectionStart = () => ({\n    type: shopActionTypes.FETCH_COLLECTIONS_START\n})\n\nexport const fetchCollectionsSuccess = collectionsMap => ({\n    type: shopActionTypes.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap\n})\n\nexport const fetchCollectionsFailure = (errorMessage) => ({\n    type: shopActionTypes.fetchCollectionsFailure,\n    payload: errorMessage\n})\n\nexport const fetchCollectionsStartAsync = () => {\n    \n    return dispatch => {\n        const collectionRef = firestore.collection(\"collections\");\n        dispatch(fetchCollectionStart());\n\n        collectionRef\n        .get()\n        .then(snapshot => {\n            const collectionsMap = convertCollectionsSnapshotToMap(snapshot);\n            dispatch(fetchCollectionsSuccess(collectionsMap));\n        })\n        .catch(error => dispatch(fetchCollectionsFailure(error.message)));\n    }\n}\n"]},"metadata":{},"sourceType":"module"}